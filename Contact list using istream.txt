#include <iostream>
#include<list>
using namespace std;

class Contacts
{
private:
    string firstName, lastName, phoneNum;

public:
    Contacts(string x=" ", string y=" ", string z=" "):
	firstName(x), lastName(y), phoneNum(z)
    {
    }

    friend ostream& operator<< (ostream &out, const Contacts &contacts);
    friend istream& operator>>(istream &in, Contacts &contacts);
};

ostream& operator<< (ostream &out, const Contacts &contacts)
{
    // Since operator<< is a friend of the Contacts class, we can access
	 //Contacts's members directly.
    out << "Contacts(" << contacts.firstName << ", " << contacts.lastName << ", "
	<< contacts.phoneNum << ")";

    return out;
}
   istream& operator>>(istream &in, Contacts &contacts)
   {
       in>>contacts.firstName;
       in>>contacts.lastName;
       in>>contacts.phoneNum;
       return in;
   }

int main()
{  string input;
    string firstName, lastName, phoneNum;
  // construct
  // the iterator constructor can also be used to construct from arrays:
  string myints[] = {"ayesha","sultana","456321"};
  list<Contacts> mylist(myints, myints +3);
  
cout<<" Enter  END to stop"<<endl;
     cin>>input;
  
while (input!="End")
{

         cout<<" enter an input "<<endl;
     
         cout<<"Enter First Name: ";  
     

         cin>>firstName;  //asks the user for first name
        
         cout<<"Enter Last Name: ";  //asks the user for last name

         cin>>lastName;

 
         cout<<"Enter Phone Number: ";  //asks the user for phone number

         cin>>phoneNum;
   
     list<Contacts> mylist;
     mylist.push_front(Contacts (firstName,lastName, phoneNum));
       cout<<mylist.front();
     cin>>input;
     
  }

  cout << "The contacts are: ";
  for (list<Contacts>::iterator it = mylist.begin(); it != mylist.end(); it++)
    cout << *it << ' ';

  cout << '\n';
  

  return 0;
}
